PARSER_BEGIN(Karloff)
import java.io.*;

class Exp {}
class Num extends Exp{
  int x;
  Num(int x){this.x=x;}
}
class Soma extends Exp{
	Exp a;
	Exp b;
  	Soma(Exp a, Exp b){this.a=a;this.b=b;}
}
class Sub extends Exp{
	Exp a;
	Exp b;
	Sub(Exp a, Exp b){this.a=a;this.b=b;}
}
class Mult extends Exp{
	Exp a;
	Exp b;
	Mult(Exp a, Exp b){this.a=a;this.b=b;}
}
class Div extends Exp{
	Exp a;
	Exp b;
	Div(Exp a, Exp b){this.a=a;this.b=b;}
}
class And extends Exp{
	Exp a;
	Exp b;
	And(Exp a, Exp b){this.a=a;this.b=b;}
}
class Or extends Exp{
	Exp a;
	Exp b;
	Or(Exp a, Exp b){this.a=a;this.b=b;}
}
class Menor extends Exp{
	Exp a;
	Exp b;
	Menor(Exp a, Exp b){this.a=a;this.b=b;}
}
class Maior extends Exp{
	Exp a;
	Exp b;
	Maior(Exp a, Exp b){this.a=a;this.b=b;}
}
class Igual extends Exp{
	Exp a;
	Exp b;
	Igual(Exp a, Exp b){this.a=a;this.b=b;}
}
class Tipo {}
class Int extends Tipo {}
class Bool extends Tipo {}
class VarDecl {
	String newVar;
	Tipo tipo;
	String tokenId;
}
class Comando {}
class Atribuicao extends Comando {
	String var;
	Exp exp;
}
class ChamadaDeFuncao extends Comando {
	String func;
	ArrayList<Exp> argumentos;
}
class If extends Comando {
	Exp expBool;
	ArrayList<Comando> comandos;
}
class While extends Comando {
	Exp expBool;
	ArrayList<Comando> comandos;
}
class Repeat extends Comando {
	ArrayList<Comando> comandos;
	Exp expBool;
}
class Return extends Comando {
	Exp exp;
}


public class Karloff {

	public static void main(String args[]) throws ParseException,IOException {
    
    Karloff parser = new Karloff(new FileInputStream(args[0]));
    ArvoreKarloff arvore = parser.Karloff();
    pprint(arvore);
  }

  	public static void pprint (ArvoreKarloff prog) {
		if (prog instanceof Num) { 
			System.out.print( ((Num) e).x);
		}
		else if (prog instanceof Soma) {
			System.out.print("(");
			printer (((Soma) e).a);
			System.out.print("+");
			printer (((Soma) e).b);
			System.out.print(")");
		}
		else if (prog instanceof Sub) {
			System.out.print("(");
			printer (((Sub) e).a);
			System.out.print("-");
			printer (((Sub) e).b);
			System.out.print(")");
		}
		else if (prog instanceof Mult) {
			System.out.print("(");
			printer (((Mult) e).a);
			System.out.print("*");
			printer (((Mult) e).b);
			System.out.print(")");
		}
		else if (prog instanceof Div) {
			System.out.print("(");
			printer (((Div) e).a);
			System.out.print("/");
			printer (((Div) e).b);
			System.out.print(")");
		}
		else if (prog instaceof And) {
			System.out.print("(");
			printer (((And) e).a);
			System.out.print("&");
			printer (((And) e).b);
			System.out.print(")");
		}
		else if (prog instance Or) {
			System.out.print("(");
			printer (((Or) e).a);
			System.out.print("|");
			printer (((Or) e).b);
			System.out.print(")");
		}
		else if (prog instanceof Menor) {
			System.out.print("(");
			printer (((Menor) e).a);
			System.out.print("<");
			printer (((Menor) e).b);
			System.out.print(")");
		}
		else if (prog instaceof Maior) {
			System.out.print("(");
			printer (((Maior) e).a);
			System.out.print(">");
			printer (((Maior) e).b);
			System.out.print(")");
		}
		else if (prog instanceof Igual) {
			System.out.print("(");
			printer (((Igual) e).a);
			System.out.print("==");
			printer (((Igual) e).b);
			System.out.print(")");
		}
		else if (prog instanceof VarDecl) {
			System.out.print("VARDECL");
			printer ((VarDecl).newVar);
			printer ((VarDecl).tipo);
			printer ((VarDecl).tokenId);
			System.out.print(";");
		}
		else if (prog instanceof Atribuicao) {
			printer ((Atribuicao).var);
			System.out.print("=");
			printer ((Atribuicao).exp);
			System.out.print(";");
		}
		else if (prog instanceof ChamadaDeFuncao) {
			printer ((ChamadaDeFuncao).func);
			System.out.print("(");
			printer ((ChamadaDeFuncao).argumentos);
			System.out.print(")");
			System.out.print(";");
		}
		else if (prog instanceof If) {
			System.out.print("if (");
			printer ((If).expBool);
			System.out.print(") then ");
			printer ((If).comandos);
			System.out.print(";");
		}
		else if (prog instanceof While) {
			System.out.print("while (");
			printer ((While).expBool);
			System.out.print(")");
			printer ((While).comandos);
			System.out.print(";");
		}
		else if (prog instanceof Repeat) {
			System.out.print("repeat");
			printer ((Repeat).comandos);
			System.out.print("until (");
			printer ((Repeat).expBool);
			System.out.print(");");
		}
		else if (prog instanceof Return) {
			System.out.print("return");
			printer ((Return).exp);
		}
	}

}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <FUNC: "func">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <VOID: "void">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <REPEAT: "repeat">
| <RETURN: "return">
| <UNTIL: "until">
| <OUTPUT: "System.output">
| <NEWVAR: "newVar">
}

TOKEN :
{
 <OP: ("+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "==")>
|< TIPO: ("int" | "bool")>
|< TRUE: ("true")>
|< FALSE: ("false")>
|< PONTO_VIRGULA: (";")>
|< VIRGULA: (",")>
|< IGUAL: ("=")>
|< NUMLIT: ["0"-"9"] ( ["0"-"9"])* ("."(["0"-"9"])+)? ("e"(["0"-"9"])+)?>
|< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* ("_")*>

}

Exp E () :
{Exp e=null;Token t;}
{ 
  ( (t=<NUM> {e= new Num(Integer.parseInt(t.image));} ) | (e=Soma()) | (e=Sub()) | (e=Mult()) | (e=Div()) | (e=And()) | (e=Or()) | (e=Menor()) | (e=Maior()) | (e=Igual()))

  {return e;}

}

Tipo Tipo():
{Tipo t=null}
{
	((t=<TIPO>))
	{return t;}
}

Soma Soma():
{ Exp e1, e2;}
{ 
 
 "(" e1=E() "+" e2=E() ")"

  {return new Soma(e1,e2);}

}

Sub Sub():
{Exp e1, e2;}
{
	"(" e1=E() "-" e2=E() ")"
	{return new Sub(e1,e2);}
}

Mult Mult():
{Exp e1, e2;}
{
	"(" e1=E() "*" e2=E() ")"
	{return new Mult(e1,e2);}
}

Div Div():
{Exp e1, e2;}
{
	"(" e1=E() "/" e2=E() ")"
	{return new Div(e1,e2);}
}

And And():
{Exp e1, e2;}
{
	"(" e1=E() "&" e2=E() ")"
	{return new And(e1,e2);}
}

Or Or():
{Exp e1, e2;}
{
	"(" e1=E() "|" e2=E() ")"
	{return new Or(e1,e2);}
}

Menor Menor():
{Exp e1, e2;}
{
	"(" e1=E() "<" e2=E() ")"
	{return new Menor(e1,e2);}
}

Maior Maior():
{Exp e1, e2;}
{
	"(" e1=E() ">" e2=E() ")"
	{return new Maior(e1,e2);}
}

Igual Igual():
{Exp e1, e2;}
{
	"(" e1=E() "==" e2=E() ")"
	{return new Igual(e1,e2);}
}

void Karloff () :
{}
{ 

  Main() 
  (Func())?
  <EOF> 
}
	

void Main ():
{}
{
 <VOID><MAIN> <ACHAVES> 
 
 	VarDecl()
	SeqComandos()

 <FCHAVES>

}
void VarDecl() :
{}
{ 
	(AuxDecl())*
}

void AuxDecl() :
{}
{ 
	<NEWVAR>
	<TIPO>
	<ID>
	<PONTO_VIRGULA>
}

void SeqComandos() :
{}
{ 
	(Comando())*
}

void Comando() :
{}
{ 
	<ID> ComandoLookahead()
| 	<IF> <APARENTESES> Exp() <FPARENTESES> <THEN> <ACHAVES> SeqComandos() <FCHAVES>  <PONTO_VIRGULA>
| 	<WHILE> <APARENTESES> Exp() <FPARENTESES> <ACHAVES> SeqComandos() <FCHAVES> <PONTO_VIRGULA>
| 	<REPEAT> <ACHAVES> SeqComandos() <FCHAVES> <UNTIL> <APARENTESES> Exp() <FPARENTESES> <PONTO_VIRGULA>
| 	<RETURN> Exp() <PONTO_VIRGULA>
| 	<OUTPUT> <APARENTESES> Exp() <FPARENTESES> <PONTO_VIRGULA>
}

void ComandoLookahead() :
{}
{
	<IGUAL> Exp() <PONTO_VIRGULA>
|	<APARENTESES> (ListaExp())? <FPARENTESES> <PONTO_VIRGULA>
}

void Exp() :
{}
{ 
	<APARENTESES> Exp() <OP> Exp() <FPARENTESES>
| 	Fator()
}

void Fator() :
{}
{ 
	<ID> FatorLookahead()
|	<NUMLIT>
|	<TRUE>
|	<FALSE>
}

void FatorLookahead() :
{}
{
	(<APARENTESES> (ListaExp())? <FPARENTESES>)?
}

void ListaExp() :
{}
{ 
	Exp() AuxListaExp()
}

void AuxListaExp() :
{}
{
	(<VIRGULA> Exp())*
}

void Func() :
{}
{ 
	<FUNC> <TIPO> <ID> <APARENTESES> (ListaArg())? <FPARENTESES> <ACHAVES> VarDecl() SeqComandos() <FCHAVES> AuxFunc()
}

void AuxFunc() :
{}
{
	(<FUNC> <TIPO> <ID> <APARENTESES> (ListaArg())? <FPARENTESES> <ACHAVES> VarDecl() <FCHAVES>)*
}

void ListaArg() :
{}
{ 
	<TIPO> <ID> AuxListaArg()
}

void AuxListaArg() :
{}
{
	(<VIRGULA> <TIPO> <ID>)*
}