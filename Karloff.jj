PARSER_BEGIN(Karloff)
import java.io.*;
import java.util.ArrayList;

class Karloff{
    Main main;
    Func func;
    Karloff(Main main, Func func){
        this.main = main;
        this.func = func;
    }
}

class Main {
	VarDecl varDecl;
	SeqComandos seqComandos;
	Main (VarDecl varDecl, SeqComandos seqComandos) {
		this.varDecl = varDecl;
		this.seqComandos = seqComandos;
	}
}

class SeqComandos {
	ArrayList<Comando> comandos;
	SeqComandos (ArrayList<Comando> comandos) {
		this.comandos = comandos;
	}
}

class Comando {
	Variable var;
	ArrayList<String> expressoes;
	ArrayList<SeqComandos> seqComandos;
	Comando (Variable var, ArrayList<String> expressoes,ArrayList<SeqComandos> seqComandos) {
		this.var = var;
		this.expressoes = expressoes;
		this.seqComandos = seqComandos;
	}
}

class VarDecl {
	ArrayList<Variable> variables;
	VarDecl(ArrayList<Variable> variables){
	    this.variables = variables
	}
}

class Variable{
    String tipo;
    String id;
    Variable(String tipo, String id){
        this.tipo = tipo;
        this.id = id;
    }
}

class ListaArg {
	ArrayList<Variable> var;
	ListaArg (ArrayList<Variable> var) {
		this.var = var;
	}
}

class Func {
	ArrayList<Variable> var;
	ArrayList<ListaArg> listaArg;
	Func (ArrayList<Variable> var, ArrayList<ListaArg> listaArg) {
		this.var = var;
		this.listaArg = listaArg;
	}

}


/**
Essencialmente tem que criar uma classe pra cada não terminal, instâncias elas e depois criar a função que printa
**/


class Exp {
	ArrayList<Fator> fator;
	ArrayList<Exp> expressoes;
	Exp (ArrayList<Fator> fator, ArrayList<Exp> expressoes) {
		this.fator = fator;
		this.expressoes = expressoes;
	}
}

class Fator {
	ArrayList<ListaExp> listaExpressoes;
	Fator (ArrayList<ListaExp> listaExpressoes) {
		this.listaExpressoes = listaExpressoes;
	}
}

class ListaExp {
	ArrayList<Exp> expressoes;
	ArrayList<ListaExp> listaExpressoes;
	ListaExp (ArrayList<Exp> expressoes, ArrayList<ListaExp> listaExpressoes) {
		this.expressoes = expressoes;
		this.listaExpressoes = listaExpressoes;
	}
}

public class Karloff {

	public static void main(String args[]) throws ParseException,IOException {
    
    Karloff parser = new Karloff(new FileInputStream(args[0]));
    ArvoreKarloff arvore = parser.Karloff();
    pprint(arvore);
  }

  	public static void pprint (ArvoreKarloff prog) {
		if (prog instanceof Num) { 
			System.out.print( ((Num) e).x);
		}
		else if (prog instanceof Soma) {
			System.out.print("(");
			printer (((Soma) e).a);
			System.out.print("+");
			printer (((Soma) e).b);
			System.out.print(")");
		}
		else if (prog instanceof Sub) {
			System.out.print("(");
			printer (((Sub) e).a);
			System.out.print("-");
			printer (((Sub) e).b);
			System.out.print(")");
		}
		else if (prog instanceof Mult) {
			System.out.print("(");
			printer (((Mult) e).a);
			System.out.print("*");
			printer (((Mult) e).b);
			System.out.print(")");
		}
		else if (prog instanceof Div) {
			System.out.print("(");
			printer (((Div) e).a);
			System.out.print("/");
			printer (((Div) e).b);
			System.out.print(")");
		}
		else if (prog instaceof And) {
			System.out.print("(");
			printer (((And) e).a);
			System.out.print("&");
			printer (((And) e).b);
			System.out.print(")");
		}
		else if (prog instance Or) {
			System.out.print("(");
			printer (((Or) e).a);
			System.out.print("|");
			printer (((Or) e).b);
			System.out.print(")");
		}
		else if (prog instanceof Menor) {
			System.out.print("(");
			printer (((Menor) e).a);
			System.out.print("<");
			printer (((Menor) e).b);
			System.out.print(")");
		}
		else if (prog instaceof Maior) {
			System.out.print("(");
			printer (((Maior) e).a);
			System.out.print(">");
			printer (((Maior) e).b);
			System.out.print(")");
		}
		else if (prog instanceof Igual) {
			System.out.print("(");
			printer (((Igual) e).a);
			System.out.print("==");
			printer (((Igual) e).b);
			System.out.print(")");
		}
		else if (prog instanceof VarDecl) {
			System.out.print("newVar");
			printer ((VarDecl).decl);
			System.out.print(";");
		}
		else if (prog instanceof Atribuicao) {
			printer ((Atribuicao).var);
			System.out.print("=");
			printer ((Atribuicao).exp);
			System.out.print(";");
		}
		else if (prog instanceof ChamadaDeFuncao) {
			printer ((ChamadaDeFuncao).func);
			System.out.print("(");
			printer ((ChamadaDeFuncao).argumentos);
			System.out.print(")");
			System.out.print(";");
		}
		else if (prog instanceof If) {
			System.out.print("if (");
			printer ((If).expBool);
			System.out.print(") then ");
			printer ((If).comandos);
			System.out.print(";");
		}
		else if (prog instanceof While) {
			System.out.print("while (");
			printer ((While).expBool);
			System.out.print(")");
			printer ((While).comandos);
			System.out.print(";");
		}
		else if (prog instanceof Repeat) {
			System.out.print("repeat");
			printer ((Repeat).comandos);
			System.out.print("until (");
			printer ((Repeat).expBool);
			System.out.print(");");
		}
		else if (prog instanceof Return) {
			System.out.print("return");
			printer ((Return).exp);
		}
	}

}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <FUNC: "func">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <VOID: "void">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <REPEAT: "repeat">
| <RETURN: "return">
| <UNTIL: "until">
| <OUTPUT: "System.output">
| <NEWVAR: "newVar">
}

TOKEN :
{
 <OP: ("+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "==")>
|< TIPO: ("int" | "bool")>
|< TRUE: ("true")>
|< FALSE: ("false")>
|< PONTO_VIRGULA: (";")>
|< VIRGULA: (",")>
|< IGUAL: ("=")>
|< NUMLIT: ["0"-"9"] ( ["0"-"9"])* ("."(["0"-"9"])+)? ("e"(["0"-"9"])+)?>
|< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* ("_")*>

}

Exp E () :
{Exp e=null;Token t;}
{ 
  ( (t=<NUM> {e= new Num(Integer.parseInt(t.image));} ) | (e=Soma()) | (e=Sub()) | (e=Mult()) | (e=Div()) | (e=And()) | (e=Or()) | (e=Menor()) | (e=Maior()) | (e=Igual()))

  {return e;}

}

Karloff Karloff_Func () :
{Main mainLocal = null; Func funcLocal = null}
{
  mainLocal = Main_Func()
  (funcLocal = Func_Func())?
  <EOF>
  { return new Karloff(mainLocal, funcLocal);}
}
	

Main Main_Func ():
{VarDecl varDeclLocal = null; SeqComandos seqComandosLocal = null}
{
	<VOID><MAIN> <ACHAVES> 

	varDeclLocal = VarDecl()
	seqComandosLocal = SeqComandos()

	<FCHAVES>
	{return new Main (varDeclLocal, seqComandosLocal);}
}
VarDecl VarDecl_Func() :
{VarDeclLocal = new ArrayList<Variable>(), Variable v}
{ 
	(v = AuxDecl(){VarDeclLocal.add(v);})*
	{return new VarDecl(VarDeclLocal);}
}

Variable AuxDecl_Func() :
{String tipoLocal, String idLocal, id; Token t;}
{ 
	<NEWVAR>
	t = <TIPO> {tipoLocal = new String(t.image);}
	t = <ID> {idLocal = new String(t.image);}
	<PONTO_VIRGULA>
	{return new Variable(tipoLocal, idLocal);}
}

SeqComandos SeqComandos() :
{ArrayList<Comando> comandos;}
{ 
	comandos.add((Comando())*);
	return new SeqComandos(comandos);
}

String Comando() :
{Token t; String retorno;}
{ 
	t = <ID> ComandoLookahead()
| 	<IF> <APARENTESES> Exp() <FPARENTESES> <THEN> <ACHAVES> SeqComandos() <FCHAVES>  <PONTO_VIRGULA>
| 	<WHILE> <APARENTESES> Exp() <FPARENTESES> <ACHAVES> SeqComandos() <FCHAVES> <PONTO_VIRGULA>
| 	<REPEAT> <ACHAVES> SeqComandos() <FCHAVES> <UNTIL> <APARENTESES> Exp() <FPARENTESES> <PONTO_VIRGULA>
| 	<RETURN> Exp() <PONTO_VIRGULA>
| 	<OUTPUT> <APARENTESES> Exp() <FPARENTESES> <PONTO_VIRGULA> {retorno = new String(t.image);}
	return retorno;
}

void ComandoLookahead() :
{}
{
	<IGUAL> Exp() <PONTO_VIRGULA>
|	<APARENTESES> (ListaExp())? <FPARENTESES> <PONTO_VIRGULA>
}

Exp Exp() :
{}
{ 
	<APARENTESES> Exp() <OP> Exp() <FPARENTESES>
| 	Fator()
}

Fator Fator() :
{ArrayList<ListaExp> listaExpressoes;}
{ 
	<ID> FatorLookahead()
|	<NUMLIT>
|	<TRUE>
|	<FALSE>
	return new Fator();
}

void FatorLookahead() :
{}
{
	(<APARENTESES> (ListaExp())? <FPARENTESES>)?
}

ListaExp ListaExp() :
{}
{ 
	Exp() AuxListaExp()
}

void AuxListaExp() :
{}
{
	(<VIRGULA> Exp())*
}

Func Func() :
{}
{ 
	<FUNC> <TIPO> <ID> <APARENTESES> (ListaArg())? <FPARENTESES> <ACHAVES> VarDecl() SeqComandos() <FCHAVES> AuxFunc()
}

void AuxFunc() :
{}
{
	(<FUNC> <TIPO> <ID> <APARENTESES> (ListaArg())? <FPARENTESES> <ACHAVES> VarDecl() <FCHAVES>)*
}

ListaArg ListaArg() :
{}
{ 
	<TIPO> <ID> AuxListaArg()
}

void AuxListaArg() :
{}
{
	(<VIRGULA> <TIPO> <ID>)*
}